{"remainingRequest":"C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\src\\stores\\ti.js","dependencies":[{"path":"C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\src\\stores\\ti.js","mtime":1547598334893},{"path":"C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import api from \"../api\";\n/* 所有题相关的数据都在这里 */\n\n/*\r\n答题的流程：\r\n1. 一次取出50道题\r\n2. 每次显示一道\r\n3. 50道答完之后再取50道\r\n...\r\n*/\n// 数据\n\nvar state = {\n  per_page: 50,\n  // 每页条数\n  page: 1,\n  // 当前取题的页数\n  allTi: [],\n  // 保存当前页的所有的题\n  index: 0 // 当前答到第几道题的下标\n  // 计算属性\n\n};\nvar getters = {}; // mutitions（修改数据）\n\nvar mutations = {\n  // 数据初始化\n  initData: function initData(state) {\n    state.page = 1;\n    state.index = 0;\n  },\n  // 设置数据\n  setAllTi: function setAllTi(state, data) {\n    state.allTi = data;\n  },\n  setPage: function setPage(state, data) {\n    state.page = data;\n  },\n  getNext: function getNext(state) {\n    if (state.index++ >= state.per_page) {\n      state.index = 0;\n    }\n  }\n}; // actions（异步操作）\n\nvar actions = {\n  // 取出当前页所有的题\n  getTi: function getTi(context, catId) {\n    // 数据初始化\n    context.commit('initData'); // 获取某一个分类下，某一页的题\n\n    api.getTiByCatId(catId, context.state.page, context.state.per_page).then(function (res) {\n      context.commit('setAllTi', res.data.data);\n    });\n  },\n  // 答题一道题(answer参数：回答的答案（0,1,2,3)\n  // 每回答一道题就把下标+1\n  answer: function answer(context, _answer) {\n    context.commit('getNext');\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\src\\stores\\ti.js"],"names":["api","state","per_page","page","allTi","index","getters","mutations","initData","setAllTi","data","setPage","getNext","actions","getTi","context","catId","commit","getTiByCatId","then","res","answer","namespaced"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA;;AAEA;;;;;;;AAQA;;AACA,IAAMC,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE,EADA;AACK;AACfC,EAAAA,IAAI,EAAE,CAFI;AAEI;AACdC,EAAAA,KAAK,EAAE,EAHG;AAGI;AACdC,EAAAA,KAAK,EAAE,CAJG,CAII;AAGlB;;AAPc,CAAd;AAQA,IAAMC,OAAO,GAAG,EAAhB,C,CAIA;;AACA,IAAMC,SAAS,GAAG;AACd;AACAC,EAAAA,QAFc,oBAELP,KAFK,EAEE;AACZA,IAAAA,KAAK,CAACE,IAAN,GAAa,CAAb;AACAF,IAAAA,KAAK,CAACI,KAAN,GAAc,CAAd;AACH,GALa;AAMd;AACAI,EAAAA,QAPc,oBAOLR,KAPK,EAOES,IAPF,EAOQ;AAClBT,IAAAA,KAAK,CAACG,KAAN,GAAcM,IAAd;AACH,GATa;AAUdC,EAAAA,OAVc,mBAUNV,KAVM,EAUCS,IAVD,EAUO;AACjBT,IAAAA,KAAK,CAACE,IAAN,GAAaO,IAAb;AACH,GAZa;AAadE,EAAAA,OAbc,mBAaNX,KAbM,EAaC;AACX,QAAGA,KAAK,CAACI,KAAN,MAAiBJ,KAAK,CAACC,QAA1B,EAAoC;AAChCD,MAAAA,KAAK,CAACI,KAAN,GAAc,CAAd;AACH;AACJ;AAjBa,CAAlB,C,CAoBA;;AACA,IAAMQ,OAAO,GAAG;AACZ;AACAC,EAAAA,KAFY,iBAENC,OAFM,EAEGC,KAFH,EAEU;AAClB;AACAD,IAAAA,OAAO,CAACE,MAAR,CAAe,UAAf,EAFkB,CAGlB;;AACAjB,IAAAA,GAAG,CAACkB,YAAJ,CAAiBF,KAAjB,EAAwBD,OAAO,CAACd,KAAR,CAAcE,IAAtC,EAA4CY,OAAO,CAACd,KAAR,CAAcC,QAA1D,EAAoEiB,IAApE,CAAyE,UAAAC,GAAG,EAAE;AAC1EL,MAAAA,OAAO,CAACE,MAAR,CAAe,UAAf,EAA2BG,GAAG,CAACV,IAAJ,CAASA,IAApC;AACH,KAFD;AAGH,GATW;AAUZ;AACA;AACAW,EAAAA,MAZY,kBAYLN,OAZK,EAYIM,OAZJ,EAYY;AACpBN,IAAAA,OAAO,CAACE,MAAR,CAAe,SAAf;AACH;AAdW,CAAhB;AAiBA,eAAe;AACXK,EAAAA,UAAU,EAAE,IADD;AAEXrB,EAAAA,KAAK,EAALA,KAFW;AAGXK,EAAAA,OAAO,EAAPA,OAHW;AAIXC,EAAAA,SAAS,EAATA,SAJW;AAKXM,EAAAA,OAAO,EAAPA;AALW,CAAf","sourcesContent":["import api from \"../api\";\r\n\r\n/* 所有题相关的数据都在这里 */\r\n\r\n/*\r\n答题的流程：\r\n1. 一次取出50道题\r\n2. 每次显示一道\r\n3. 50道答完之后再取50道\r\n...\r\n*/\r\n\r\n// 数据\r\nconst state = {\r\n    per_page: 50,  // 每页条数\r\n    page: 1,      // 当前取题的页数\r\n    allTi: [],    // 保存当前页的所有的题\r\n    index: 0      // 当前答到第几道题的下标\r\n}\r\n\r\n// 计算属性\r\nconst getters = {\r\n    \r\n}\r\n\r\n// mutitions（修改数据）\r\nconst mutations = {\r\n    // 数据初始化\r\n    initData(state) {\r\n        state.page = 1\r\n        state.index = 0\r\n    },\r\n    // 设置数据\r\n    setAllTi(state, data) {\r\n        state.allTi = data\r\n    },\r\n    setPage(state, data) {\r\n        state.page = data\r\n    },\r\n    getNext(state) {\r\n        if(state.index++ >= state.per_page) {\r\n            state.index = 0\r\n        }\r\n    }\r\n}\r\n\r\n// actions（异步操作）\r\nconst actions = {\r\n    // 取出当前页所有的题\r\n    getTi(context, catId) {\r\n        // 数据初始化\r\n        context.commit('initData')\r\n        // 获取某一个分类下，某一页的题\r\n        api.getTiByCatId(catId, context.state.page, context.state.per_page).then(res=>{\r\n            context.commit('setAllTi', res.data.data)\r\n        })\r\n    },\r\n    // 答题一道题(answer参数：回答的答案（0,1,2,3)\r\n    // 每回答一道题就把下标+1\r\n    answer(context, answer) {\r\n        context.commit('getNext')\r\n    }\r\n}\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    mutations,\r\n    actions\r\n}"]}]}