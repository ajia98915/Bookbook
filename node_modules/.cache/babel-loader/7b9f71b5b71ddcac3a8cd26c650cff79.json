{"remainingRequest":"C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\src\\stores\\member.js","dependencies":[{"path":"C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\src\\stores\\member.js","mtime":1547469466121},{"path":"C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport api from \"../api\";\n/* 所有用户相关的数据都在这里 */\n// 数据\n\nvar state = {\n  username: '' // 当前登录用户名\n  // 计算属性\n\n};\nvar getters = {\n  // 是否登录的状态 \n  logined: function logined(state) {\n    return state.username != '';\n  }\n}; // mutitions（修改数据）\n\nvar mutations = {\n  // 设置数据\n  setUserName: function setUserName(state, data) {\n    state.username = data;\n  }\n}; // actions（异步操作）\n\nvar actions = {\n  // 初始用户状态\n  initUsername: function initUsername(context) {\n    var username = sessionStorage.getItem('username');\n\n    if (username) {\n      context.commit('setUserName', username);\n    }\n  },\n  login: function login(context, username, password) {\n    api.login(username, password).then(function (res) {\n      if (res.data.status_code == 200) {\n        // 调用 setUserName \n        context.commit('setUserName', username); // 把令牌保存到本地（现在我希望用户关闭浏览器之后，就代表退出，下次再使用时需要重新登录）\n\n        sessionStorage.setItem('token', res.data.data.token);\n        sessionStorage.setItem('username', username); // 扩展：localStorage 永久登录，下次打开浏览器不需要重新 登录\n      }\n    });\n  },\n  logout: function logout(context) {\n    // 清空 session\n    sessionStorage.clear(); // 设置状态为空（然后页面自动更新）\n\n    context.commit('setUserName', '');\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["C:\\Users\\bsj18832421339\\Desktop\\练习\\datia\\src\\stores\\member.js"],"names":["api","state","username","getters","logined","mutations","setUserName","data","actions","initUsername","context","sessionStorage","getItem","commit","login","password","then","res","status_code","setItem","token","logout","clear","namespaced"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA;AAEA;;AACA,IAAMC,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE,EADA,CACM;AAGpB;;AAJc,CAAd;AAKA,IAAMC,OAAO,GAAG;AACZ;AACAC,EAAAA,OAFY,mBAEJH,KAFI,EAEG;AACX,WAAOA,KAAK,CAACC,QAAN,IAAkB,EAAzB;AACH;AAJW,CAAhB,C,CAOA;;AACA,IAAMG,SAAS,GAAG;AACd;AACAC,EAAAA,WAFc,uBAEFL,KAFE,EAEKM,IAFL,EAEW;AACrBN,IAAAA,KAAK,CAACC,QAAN,GAAiBK,IAAjB;AACH;AAJa,CAAlB,C,CAOA;;AACA,IAAMC,OAAO,GAAG;AACZ;AACAC,EAAAA,YAFY,wBAECC,OAFD,EAEU;AAClB,QAAIR,QAAQ,GAAGS,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAf;;AACA,QAAGV,QAAH,EAAa;AACTQ,MAAAA,OAAO,CAACG,MAAR,CAAe,aAAf,EAA8BX,QAA9B;AACH;AACJ,GAPW;AAQZY,EAAAA,KARY,iBAQNJ,OARM,EAQGR,QARH,EAQaa,QARb,EAQuB;AAC/Bf,IAAAA,GAAG,CAACc,KAAJ,CAAUZ,QAAV,EAAoBa,QAApB,EAA8BC,IAA9B,CAAmC,UAAAC,GAAG,EAAE;AAEpC,UAAGA,GAAG,CAACV,IAAJ,CAASW,WAAT,IAAwB,GAA3B,EAAgC;AAC5B;AACAR,QAAAA,OAAO,CAACG,MAAR,CAAe,aAAf,EAA8BX,QAA9B,EAF4B,CAG5B;;AACAS,QAAAA,cAAc,CAACQ,OAAf,CAAuB,OAAvB,EAAgCF,GAAG,CAACV,IAAJ,CAASA,IAAT,CAAca,KAA9C;AACAT,QAAAA,cAAc,CAACQ,OAAf,CAAuB,UAAvB,EAAmCjB,QAAnC,EAL4B,CAM5B;AACH;AAEJ,KAXD;AAYH,GArBW;AAsBZmB,EAAAA,MAtBY,kBAsBLX,OAtBK,EAsBI;AACZ;AACAC,IAAAA,cAAc,CAACW,KAAf,GAFY,CAGZ;;AACAZ,IAAAA,OAAO,CAACG,MAAR,CAAe,aAAf,EAA8B,EAA9B;AACH;AA3BW,CAAhB;AA8BA,eAAe;AACXU,EAAAA,UAAU,EAAE,IADD;AAEXtB,EAAAA,KAAK,EAALA,KAFW;AAGXE,EAAAA,OAAO,EAAPA,OAHW;AAIXE,EAAAA,SAAS,EAATA,SAJW;AAKXG,EAAAA,OAAO,EAAPA;AALW,CAAf","sourcesContent":["import api from \"../api\";\r\n\r\n/* 所有用户相关的数据都在这里 */\r\n\r\n// 数据\r\nconst state = {\r\n    username: ''    // 当前登录用户名\r\n}\r\n\r\n// 计算属性\r\nconst getters = {\r\n    // 是否登录的状态 \r\n    logined(state) {\r\n        return state.username != ''\r\n    }\r\n}\r\n\r\n// mutitions（修改数据）\r\nconst mutations = {\r\n    // 设置数据\r\n    setUserName(state, data) {\r\n        state.username = data\r\n    }\r\n}\r\n\r\n// actions（异步操作）\r\nconst actions = {\r\n    // 初始用户状态\r\n    initUsername(context) {\r\n        let username = sessionStorage.getItem('username')\r\n        if(username) {\r\n            context.commit('setUserName', username)\r\n        }\r\n    },\r\n    login(context, username, password) {\r\n        api.login(username, password).then(res=>{\r\n\r\n            if(res.data.status_code == 200) {\r\n                // 调用 setUserName \r\n                context.commit('setUserName', username)\r\n                // 把令牌保存到本地（现在我希望用户关闭浏览器之后，就代表退出，下次再使用时需要重新登录）\r\n                sessionStorage.setItem('token', res.data.data.token)                \r\n                sessionStorage.setItem('username', username)                \r\n                // 扩展：localStorage 永久登录，下次打开浏览器不需要重新 登录\r\n            }\r\n\r\n        })\r\n    },\r\n    logout(context) {\r\n        // 清空 session\r\n        sessionStorage.clear()\r\n        // 设置状态为空（然后页面自动更新）\r\n        context.commit('setUserName', '')\r\n    }\r\n}\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    mutations,\r\n    actions\r\n}"]}]}